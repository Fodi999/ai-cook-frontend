// API Configuration –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
export interface APIConfig {
  name: string;
  baseURL: string;
  healthEndpoint: string;
  websocketURL?: string;
  description: string;
  isLocal: boolean;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API
export const API_CONFIGS: Record<string, APIConfig> = {
  // –õ–æ–∫–∞–ª—å–Ω—ã–π Go Backend (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
  local_go: {
    name: 'Local Go Backend',
    baseURL: 'http://localhost:8080/api/v1',
    healthEndpoint: 'http://localhost:8080/health',
    websocketURL: 'ws://localhost:8080/api/v1/realtime/ws',
    description: '–õ–æ–∫–∞–ª—å–Ω—ã–π Go –±—ç–∫–µ–Ω–¥ –Ω–∞ –ø–æ—Ä—Ç—É 8080',
    isLocal: true
  },

  // –õ–æ–∫–∞–ª—å–Ω—ã–π Rust Backend (–µ—Å–ª–∏ –µ—Å—Ç—å)
  local_rust: {
    name: 'Local Rust Backend',
    baseURL: 'http://localhost:3002/api/v1',
    healthEndpoint: 'http://localhost:3002/health',
    websocketURL: 'ws://localhost:3002/api/v1/realtime/ws',
    description: '–õ–æ–∫–∞–ª—å–Ω—ã–π Rust –±—ç–∫–µ–Ω–¥ –Ω–∞ –ø–æ—Ä—Ç—É 3002',
    isLocal: true
  },

  // Production Go Backend –Ω–∞ Koyeb
  production: {
    name: 'Production Koyeb',
    baseURL: 'https://itcook-backend-go-fodi999-8b0a955d.koyeb.app/api/v1',
    healthEndpoint: 'https://itcook-backend-go-fodi999-8b0a955d.koyeb.app/health',
    websocketURL: 'wss://itcook-backend-go-fodi999-8b0a955d.koyeb.app/api/v1/realtime/ws',
    description: '–ü—Ä–æ–¥–∞–∫—à–µ–Ω Go –±—ç–∫–µ–Ω–¥ –Ω–∞ Koyeb',
    isLocal: false
  }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export function getDefaultAPIConfig(): APIConfig {
  // –í development —Ä–µ–∂–∏–º–µ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫–µ–Ω–¥
  if (process.env.NODE_ENV === 'development') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API
    const localBackend = process.env.NEXT_PUBLIC_LOCAL_BACKEND || 'local_go';
    if (API_CONFIGS[localBackend]) {
      return API_CONFIGS[localBackend];
    }
  }

  // –í production –∏–ª–∏ –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è NEXT_PUBLIC_USE_PRODUCTION —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
  if (process.env.NODE_ENV === 'production' || process.env.NEXT_PUBLIC_USE_PRODUCTION === 'true') {
    return API_CONFIGS.production;
  }

  // Fallback –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω
  return API_CONFIGS.production;
}

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ –∏–º–µ–Ω–∏
export function getAPIConfig(configName?: string): APIConfig {
  if (configName && API_CONFIGS[configName]) {
    return API_CONFIGS[configName];
  }
  return getDefaultAPIConfig();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
export async function checkAPIHealth(config: APIConfig): Promise<boolean> {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);
    
    const response = await fetch(config.healthEndpoint, {
      method: 'GET',
      signal: controller.signal,
    });
    
    clearTimeout(timeoutId);
    return response.ok;
  } catch (error) {
    console.warn(`API ${config.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, error);
    return false;
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ API
export async function selectAvailableAPI(): Promise<APIConfig> {
  const defaultConfig = getDefaultAPIConfig();
  
  // –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API
  if (process.env.NODE_ENV === 'development') {
    for (const [key, config] of Object.entries(API_CONFIGS)) {
      if (config.isLocal) {
        const isAvailable = await checkAPIHealth(config);
        if (isAvailable) {
          console.log(`üü¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π API: ${config.name}`);
          return config;
        }
      }
    }
    
    console.log(`üü° –õ–æ–∫–∞–ª—å–Ω—ã–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω`);
  }

  // Fallback –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω
  return API_CONFIGS.production;
}

// –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
let currentAPIConfig: APIConfig = getDefaultAPIConfig();

export function getCurrentAPIConfig(): APIConfig {
  return currentAPIConfig;
}

export function setCurrentAPIConfig(config: APIConfig): void {
  currentAPIConfig = config;
  console.log(`üîÑ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${config.name} (${config.baseURL})`);
}
