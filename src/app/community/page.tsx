'use client';

import { useState, useEffect } from 'react';
import { ChefHat, Heart, MessageCircle, Share2, ArrowLeft, Plus, TrendingUp, Users, Award, Camera, X, Send } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar } from '@/components/ui/avatar';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import Navigation from '@/components/Navigation';
import toast, { Toaster } from 'react-hot-toast';

export default function Community() {
  const [selectedTab, setSelectedTab] = useState('feed');
  const [showCreatePost, setShowCreatePost] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [userData, setUserData] = useState<any>(null);
  const [posts, setPosts] = useState([
    {
      id: 1,
      author: {
        name: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
        avatar: "üë©‚Äçüç≥",
        level: "–®–µ—Ñ-–∫—É–ª–∏–Ω–∞—Ä"
      },
      content: "–°–µ–≥–æ–¥–Ω—è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—É—é –ø–∞—Å—Ç—É –∫–∞—Ä–±–æ–Ω–∞—Ä–∞! –°–µ–∫—Ä–µ—Ç –≤ —Ç–æ–º, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å —Å–∫–æ–≤–æ—Ä–æ–¥—É —Å –æ–≥–Ω—è –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —è–∏—á–Ω–æ–π —Å–º–µ—Å–∏. –ü–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—Å—Ç–æ –∏–¥–µ–∞–ª—å–Ω–æ! üçù",
      image: "üçù",
      likes: 24,
      comments: 8,
      timeAgo: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥",
      tags: ["#–ø–∞—Å—Ç–∞", "#–∫–∞—Ä–±–æ–Ω–∞—Ä–∞", "#–∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è_–∫—É—Ö–Ω—è"]
    },
    {
      id: 2,
      author: {
        name: "–ú–∏—Ö–∞–∏–ª –í–æ–ª–∫–æ–≤",
        avatar: "üë®‚Äçüç≥",
        level: "–ö—É–ª–∏–Ω–∞—Ä"
      },
      content: "–ö—Ç–æ-–Ω–∏–±—É–¥—å –∑–Ω–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–π —Ä–µ—Ü–µ–ø—Ç –±–æ—Ä—â–∞ –±–µ–∑ –º—è—Å–∞? –•–æ—á—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–µ–º—å–∏.",
      image: "ü•ï",
      likes: 12,
      comments: 15,
      timeAgo: "4 —á–∞—Å–∞ –Ω–∞–∑–∞–¥",
      tags: ["#–±–æ—Ä—â", "#–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ", "#–ø–æ–º–æ—â—å"]
    },
    {
      id: 3,
      author: {
        name: "–ï–ª–µ–Ω–∞ –°–æ–∫–æ–ª–æ–≤–∞",
        avatar: "üë©‚Äçüç≥",
        level: "–ú–∞—Å—Ç–µ—Ä-–∫—É–ª–∏–Ω–∞—Ä"
      },
      content: "–ú–æ–π –Ω–æ–≤—ã–π —à–æ–∫–æ–ª–∞–¥–Ω—ã–π —Ç–æ—Ä—Ç –ø–æ–∫–æ—Ä–∏–ª –≤—Å—é —Å–µ–º—å—é! –†–µ—Ü–µ–ø—Ç —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∞ –≤ —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é. –ö—Ç–æ —Ö–æ—á–µ—Ç - –¥–µ–ª—é—Å—å! üéÇ‚ú®",
      image: "üéÇ",
      likes: 45,
      comments: 22,
      timeAgo: "6 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥",
      tags: ["#—Ç–æ—Ä—Ç", "#—à–æ–∫–æ–ª–∞–¥", "#–¥–µ—Å–µ—Ä—Ç", "#—Ä–µ—Ü–µ–ø—Ç"]
    },
    {
      id: 4,
      author: {
        name: "–î–º–∏—Ç—Ä–∏–π –ö—É–∑–Ω–µ—Ü–æ–≤",
        avatar: "üë®‚Äçüç≥",
        level: "–ù–∞—á–∏–Ω–∞—é—â–∏–π"
      },
      content: "–ü–µ—Ä–≤—ã–π —Ä–∞–∑ –≥–æ—Ç–æ–≤–ª—é —Å—É—à–∏ –¥–æ–º–∞! –ù–µ –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –Ω–æ –æ—á–µ–Ω—å –≤–∫—É—Å–Ω–æ üòÖ –ü—Ä–∞–∫—Ç–∏–∫–∞ - –∑–∞–ª–æ–≥ —É—Å–ø–µ—Ö–∞!",
      image: "üç£",
      likes: 18,
      comments: 12,
      timeAgo: "8 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥",
      tags: ["#—Å—É—à–∏", "#–ø–µ—Ä–≤—ã–π_—Ä–∞–∑", "#–ø—Ä–∞–∫—Ç–∏–∫–∞"]
    }
  ]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
  const [newPost, setNewPost] = useState({
    content: '',
    tags: '',
    image: ''
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const loggedIn = localStorage.getItem('user_logged_in');
    const savedUserData = localStorage.getItem('user_data');
    
    if (loggedIn === 'true' && savedUserData) {
      setIsLoggedIn(true);
      setUserData(JSON.parse(savedUserData));
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
  const handleCreatePost = () => {
    if (!newPost.content.trim()) {
      toast.error('–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞');
      return;
    }

    const post = {
      id: posts.length + 1,
      author: {
        name: userData?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        avatar: 'üë§',
        level: '–ù–æ–≤–∏—á–æ–∫'
      },
      content: newPost.content,
      image: newPost.image || 'üçΩÔ∏è',
      likes: 0,
      comments: 0,
      timeAgo: '–¢–æ–ª—å–∫–æ —á—Ç–æ',
      tags: newPost.tags.split(' ').filter(tag => tag.startsWith('#'))
    };

    setPosts([post, ...posts]);
    setNewPost({ content: '', tags: '', image: '' });
    setShowCreatePost(false);
    toast.success('–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!');
  };

  // –§—É–Ω–∫—Ü–∏—è –ª–∞–π–∫–∞ –ø–æ—Å—Ç–∞
  const handleLikePost = (postId: number) => {
    setPosts(posts.map(post => 
      post.id === postId 
        ? { ...post, likes: post.likes + 1 }
        : post
    ));
    toast.success('–õ–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω!');
  };

  const challenges = [
    {
      id: 1,
      title: "30 –¥–Ω–µ–π –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è",
      description: "–ì–æ—Ç–æ–≤—å—Ç–µ –∑–¥–æ—Ä–æ–≤—ã–µ –±–ª—é–¥–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞",
      participants: 1250,
      daysLeft: 12,
      reward: "–ó–Ω–∞—á–æ–∫ '–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ'"
    },
    {
      id: 2,
      title: "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –Ω–µ–¥–µ–ª—è",
      description: "–û—Å–≤–æ–π—Ç–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ –±–ª—é–¥–∞",
      participants: 834,
      daysLeft: 5,
      reward: "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –æ—Ç –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —à–µ—Ñ–∞"
    },
    {
      id: 3,
      title: "–î–µ—Å–µ—Ä—Ç–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω",
      description: "–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ 10 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ—Å–µ—Ä—Ç–æ–≤",
      participants: 567,
      daysLeft: 18,
      reward: "–ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤"
    }
  ];

  const topChefs = [
    { name: "–í–∏–∫—Ç–æ—Ä –ë–µ–ª–æ–≤", level: "–ú–∞—Å—Ç–µ—Ä-–∫—É–ª–∏–Ω–∞—Ä", points: 12500, avatar: "üë®‚Äçüç≥" },
    { name: "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞", level: "–®–µ—Ñ-–∫—É–ª–∏–Ω–∞—Ä", points: 11200, avatar: "üë©‚Äçüç≥" },
    { name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–º–∏—Ä–Ω–æ–≤", level: "–ö—É–ª–∏–Ω–∞—Ä", points: 9800, avatar: "üë®‚Äçüç≥" },
    { name: "–û–ª—å–≥–∞ –ü–µ—Ç—Ä–æ–≤–∞", level: "–®–µ—Ñ-–∫—É–ª–∏–Ω–∞—Ä", points: 9650, avatar: "üë©‚Äçüç≥" },
    { name: "–ò–≥–æ—Ä—å –§–µ–¥–æ—Ä–æ–≤", level: "–ú–∞—Å—Ç–µ—Ä-–∫—É–ª–∏–Ω–∞—Ä", points: 9200, avatar: "üë®‚Äçüç≥" }
  ];

  const tabs = [
    { id: 'feed', label: '–õ–µ–Ω—Ç–∞', icon: <MessageCircle className="h-4 w-4" /> },
    { id: 'challenges', label: '–ß–µ–ª–ª–µ–Ω–¥–∂–∏', icon: <Award className="h-4 w-4" /> },
    { id: 'leaderboard', label: '–†–µ–π—Ç–∏–Ω–≥', icon: <TrendingUp className="h-4 w-4" /> }
  ];

  return (
    <>
      <Navigation />
      <Toaster position="top-right" />
      
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
        {/* Header */}
        <header className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center py-6">
              <div className="flex items-center space-x-3">
                <div className="p-2 bg-orange-500 rounded-lg">
                  <Users className="h-6 w-6 text-white" />
                </div>
                <h1 className="text-2xl font-bold text-gray-900 dark:text-white">–°–æ–æ–±—â–µ—Å—Ç–≤–æ</h1>
              </div>
              
              {isLoggedIn && (
                <Button 
                  onClick={() => setShowCreatePost(true)}
                  className="bg-orange-500 hover:bg-orange-600 flex items-center space-x-2"
                >
                  <Plus className="h-4 w-4" />
                  <span>–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç</span>
                </Button>
              )}
            </div>
          </div>
        </header>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Tabs */}
        <div className="flex space-x-1 mb-8">
          {tabs.map((tab) => (
            <Button
              key={tab.id}
              variant={selectedTab === tab.id ? "default" : "ghost"}
              onClick={() => setSelectedTab(tab.id)}
              className="flex items-center space-x-2"
            >
              {tab.icon}
              <span>{tab.label}</span>
            </Button>
          ))}
        </div>

        {/* Feed Tab */}
        {selectedTab === 'feed' && (
          <div className="grid lg:grid-cols-3 gap-8">
            {/* Main Feed */}
            <div className="lg:col-span-2 space-y-6">
              {/* Create Post Card */}
              {isLoggedIn ? (
                <Card>
                  <CardContent className="p-6">
                    <div className="flex items-center space-x-4">
                      <div className="w-12 h-12 bg-orange-100 dark:bg-orange-900 rounded-full flex items-center justify-center text-xl">
                        ÔøΩ
                      </div>
                      <div className="flex-1">
                        <Button 
                          variant="outline" 
                          className="w-full justify-start text-gray-500"
                          onClick={() => setShowCreatePost(true)}
                        >
                          –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–º –æ–ø—ã—Ç–æ–º...
                        </Button>
                      </div>
                      <Button onClick={() => setShowCreatePost(true)}>
                        <Plus className="h-4 w-4 mr-2" />
                        –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ) : (
                <Card>
                  <CardContent className="p-6 text-center">
                    <div className="space-y-4">
                      <p className="text-gray-600 dark:text-gray-400">
                        –í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –¥–µ–ª–∏—Ç—å—Å—è —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –∏ –æ–±—â–∞—Ç—å—Å—è —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º
                      </p>
                      <div className="flex justify-center space-x-4">
                        <Button asChild variant="outline">
                          <a href="/login">–í–æ–π—Ç–∏</a>
                        </Button>
                        <Button asChild>
                          <a href="/register">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a>
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Posts */}
              {posts.map((post, index) => (
                <motion.div
                  key={post.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3, delay: index * 0.1 }}
                >
                  <Card>
                    <CardHeader className="pb-4">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <div className="w-12 h-12 bg-orange-100 dark:bg-orange-900 rounded-full flex items-center justify-center text-xl">
                            {post.author.avatar}
                          </div>
                          <div>
                            <h3 className="font-semibold text-gray-900 dark:text-white">{post.author.name}</h3>
                            <div className="flex items-center space-x-2">
                              <Badge variant="outline" className="text-xs">
                                {post.author.level}
                              </Badge>
                              <span className="text-sm text-gray-500">{post.timeAgo}</span>
                            </div>
                          </div>
                        </div>
                        <Button variant="ghost" size="sm">
                          <Share2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </CardHeader>
                    <CardContent className="pt-0">
                      <p className="text-gray-700 dark:text-gray-300 mb-4">{post.content}</p>
                      
                      {/* Post Image */}
                      <div className="w-full h-64 bg-gradient-to-br from-orange-100 to-red-100 dark:from-orange-900 dark:to-red-900 rounded-lg flex items-center justify-center text-6xl mb-4">
                        {post.image}
                      </div>

                      {/* Tags */}
                      <div className="flex flex-wrap gap-2 mb-4">
                        {post.tags.map((tag, i) => (
                          <Badge key={i} variant="outline" className="text-xs">
                            {tag}
                          </Badge>
                        ))}
                      </div>

                      {/* Actions */}
                      <div className="flex items-center justify-between pt-4 border-t border-gray-200 dark:border-gray-700">
                        <div className="flex items-center space-x-4">
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="text-gray-500 hover:text-red-500"
                            onClick={() => handleLikePost(post.id)}
                          >
                            <Heart className="h-4 w-4 mr-1" />
                            {post.likes}
                          </Button>
                          <Button variant="ghost" size="sm" className="text-gray-500 hover:text-blue-500">
                            <MessageCircle className="h-4 w-4 mr-1" />
                            {post.comments}
                          </Button>
                        </div>
                        <Button variant="ghost" size="sm" className="text-gray-500">
                          <Share2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              ))}
            </div>

            {/* Sidebar */}
            <div className="space-y-6">
              {/* Community Stats */}
              <Card>
                <CardHeader>
                  <h3 className="font-semibold">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</h3>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex justify-between">
                    <span className="text-gray-600 dark:text-gray-300">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—É–ª–∏–Ω–∞—Ä–æ–≤</span>
                    <span className="font-semibold">15,234</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600 dark:text-gray-300">–†–µ—Ü–µ–ø—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ</span>
                    <span className="font-semibold">8,567</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600 dark:text-gray-300">–°–µ–≥–æ–¥–Ω—è –æ–Ω–ª–∞–π–Ω</span>
                    <span className="font-semibold">2,891</span>
                  </div>
                </CardContent>
              </Card>

              {/* Trending Tags */}
              <Card>
                <CardHeader>
                  <h3 className="font-semibold">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏</h3>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    {['#–∑–¥–æ—Ä–æ–≤–æ–µ_–ø–∏—Ç–∞–Ω–∏–µ', '#–∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è_–∫—É—Ö–Ω—è', '#–¥–µ—Å–µ—Ä—Ç—ã', '#–±—ã—Å—Ç—Ä—ã–µ_—Ä–µ—Ü–µ–ø—Ç—ã', '#–≤–µ–≥–∞–Ω', '#–≤—ã–ø–µ—á–∫–∞'].map((tag, i) => (
                      <Badge key={i} variant="outline" className="cursor-pointer hover:bg-orange-100 dark:hover:bg-orange-900">
                        {tag}
                      </Badge>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )}

        {/* Challenges Tab */}
        {selectedTab === 'challenges' && (
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {challenges.map((challenge, index) => (
              <motion.div
                key={challenge.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3, delay: index * 0.1 }}
              >
                <Card className="h-full">
                  <CardHeader>
                    <div className="flex items-center justify-between mb-2">
                      <Badge variant="outline">{challenge.daysLeft} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å</Badge>
                      <Award className="h-5 w-5 text-orange-500" />
                    </div>
                    <h3 className="text-xl font-semibold">{challenge.title}</h3>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-600 dark:text-gray-300 mb-4">{challenge.description}</p>
                    <div className="space-y-3">
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-gray-600 dark:text-gray-300">–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</span>
                        <span className="font-semibold">{challenge.participants.toLocaleString()}</span>
                      </div>
                      <div className="text-sm">
                        <span className="text-gray-600 dark:text-gray-300">–ù–∞–≥—Ä–∞–¥–∞: </span>
                        <span className="font-semibold text-orange-600">{challenge.reward}</span>
                      </div>
                      <Button className="w-full">
                        –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </div>
        )}

        {/* Leaderboard Tab */}
        {selectedTab === 'leaderboard' && (
          <div className="max-w-2xl mx-auto">
            <Card>
              <CardHeader>
                <h3 className="text-xl font-semibold flex items-center">
                  <TrendingUp className="h-5 w-5 mr-2 text-orange-500" />
                  –¢–æ–ø –∫—É–ª–∏–Ω–∞—Ä–æ–≤ –º–µ—Å—è—Ü–∞
                </h3>
              </CardHeader>
              <CardContent className="space-y-4">
                {topChefs.map((chef, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.3, delay: index * 0.1 }}
                    className="flex items-center justify-between p-4 rounded-lg bg-gray-50 dark:bg-gray-800"
                  >
                    <div className="flex items-center space-x-4">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center text-lg ${
                        index === 0 ? 'bg-yellow-100 text-yellow-800' :
                        index === 1 ? 'bg-gray-100 text-gray-800' :
                        index === 2 ? 'bg-orange-100 text-orange-800' :
                        'bg-blue-100 text-blue-800'
                      }`}>
                        {index < 3 ? ['ü•á', 'ü•à', 'ü•â'][index] : `#${index + 1}`}
                      </div>
                      <div className="w-10 h-10 bg-orange-100 dark:bg-orange-900 rounded-full flex items-center justify-center text-lg">
                        {chef.avatar}
                      </div>
                      <div>
                        <h4 className="font-semibold text-gray-900 dark:text-white">{chef.name}</h4>
                        <Badge variant="outline" className="text-xs">
                          {chef.level}
                        </Badge>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="font-semibold text-gray-900 dark:text-white">{chef.points.toLocaleString()}</div>
                      <div className="text-xs text-gray-500">–æ—á–∫–æ–≤</div>
                    </div>
                  </motion.div>
                ))}
              </CardContent>
            </Card>
          </div>
        )}
      </div>

      {/* Modal –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ */}
      <AnimatePresence>
        {showCreatePost && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
            onClick={() => setShowCreatePost(false)}
          >
            <motion.div
              initial={{ scale: 0.95, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.95, opacity: 0 }}
              className="bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-lg"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                  –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç
                </h3>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setShowCreatePost(false)}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –∫—É–ª–∏–Ω–∞—Ä–∏–∏?
                  </label>
                  <Textarea
                    value={newPost.content}
                    onChange={(e) => setNewPost({...newPost, content: e.target.value})}
                    placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º —Ä–µ—Ü–µ–ø—Ç–æ–º, –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–º –æ–ø—ã—Ç–æ–º –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Å–æ–æ–±—â–µ—Å—Ç–≤—É..."
                    className="min-h-[120px]"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–æ—Å—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                  </label>
                  <Input
                    value={newPost.image}
                    onChange={(e) => setNewPost({...newPost, image: e.target.value})}
                    placeholder="üçù ü•ó üç∞ üç≤"
                    maxLength={5}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)
                  </label>
                  <Input
                    value={newPost.tags}
                    onChange={(e) => setNewPost({...newPost, tags: e.target.value})}
                    placeholder="#—Ä–µ—Ü–µ–ø—Ç #–ø–∞—Å—Ç–∞ #–±—ã—Å—Ç—Ä–æ #–≤–∫—É—Å–Ω–æ"
                  />
                </div>

                <div className="flex justify-end space-x-3 pt-4">
                  <Button
                    variant="outline"
                    onClick={() => setShowCreatePost(false)}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </Button>
                  <Button
                    onClick={handleCreatePost}
                    className="bg-orange-500 hover:bg-orange-600 flex items-center space-x-2"
                  >
                    <Send className="h-4 w-4" />
                    <span>–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å</span>
                  </Button>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
    </>
  );
}
