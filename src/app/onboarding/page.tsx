'use client';

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  ChefHat, 
  Target, 
  Users, 
  BarChart3, 
  ArrowRight, 
  ArrowLeft, 
  Check,
  User,
  Scale,
  Activity,
  Calendar,
  MapPin,
  Clock
} from 'lucide-react';
import { Button } from '../../components/ui/button';
import Navigation from '../../components/Navigation';
import { useT } from '../../hooks/useT';

export default function Onboarding() {
  const t = useT();
  const [currentStep, setCurrentStep] = useState(0);
  const [userData, setUserData] = useState({
    goals: [] as string[],
    experience: '',
    activityLevel: '',
    dietaryRestrictions: [] as string[],
    weight: '',
    height: '',
    age: '',
    gender: ''
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const [contextData, setContextData] = useState({
    currentDate: '',
    currentTime: '',
    timezone: '',
    location: null as { 
      lat: number; 
      lon: number; 
      city?: string;
      country?: string;
      state?: string;
      street?: string;
      houseNumber?: string;
      postcode?: string;
      district?: string;
      fullAddress?: string;
    } | null,
    locationError: null as string | null,
    isGettingLocation: false,
    showLocationPicker: false
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Google Maps –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  const openLocationPicker = () => {
    setContextData(prev => ({ ...prev, showLocationPicker: true }));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã
  const closeLocationPicker = () => {
    setContextData(prev => ({ ...prev, showLocationPicker: false }));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  const setSelectedLocation = async (lat: number, lon: number) => {
    setContextData(prev => ({ ...prev, isGettingLocation: true }));
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥—Ä–µ—Å–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      const response = await fetch(
        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}&accept-language=ru&addressdetails=1&zoom=18`
      );
      const data = await response.json();
      
      console.log('–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ - –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', data);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥—Ä–µ—Å–µ
      const address = data.address || {};
      const locationData = {
        lat,
        lon,
        city: address.city || address.town || address.village || address.municipality || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥',
        country: address.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞',
        state: address.state || address.region || address.province,
        street: address.road || address.street,
        houseNumber: address.house_number,
        postcode: address.postcode,
        district: address.suburb || address.district || address.neighbourhood,
        fullAddress: data.display_name || `${lat.toFixed(4)}, ${lon.toFixed(4)}`
      };

      console.log('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞:', locationData);

      setContextData(prev => ({
        ...prev,
        location: locationData,
        isGettingLocation: false,
        locationError: null,
        showLocationPicker: false
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
      setContextData(prev => ({
        ...prev,
        location: { lat, lon },
        isGettingLocation: false,
        locationError: null,
        showLocationPicker: false
      }));
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã
  useEffect(() => {
    const updateDateTime = () => {
      const now = new Date();
      const currentDate = now.toLocaleDateString('ru-RU', {
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric'
      });
      const currentTime = now.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
      });
      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;

      setContextData(prev => ({
        ...prev,
        currentDate,
        currentTime,
        timezone
      }));
    };

    updateDateTime();
    const interval = setInterval(updateDateTime, 60000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    return () => clearInterval(interval);
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  useEffect(() => {
    const getLocation = async () => {
      if (!navigator.geolocation) {
        setContextData(prev => ({
          ...prev,
          locationError: '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º'
        }));
        return;
      }

      setContextData(prev => ({ ...prev, isGettingLocation: true }));

      navigator.geolocation.getCurrentPosition(
        async (position) => {
          const lat = position.coords.latitude;
          const lon = position.coords.longitude;
          
          try {
            // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ Nominatim API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
            const response = await fetch(
              `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}&accept-language=ru&addressdetails=1&zoom=18`
            );
            const data = await response.json();
            
            console.log('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è - –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', data);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥—Ä–µ—Å–µ
            const address = data.address || {};
            const locationData = {
              lat,
              lon,
              city: address.city || address.town || address.village || address.municipality || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥',
              country: address.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞',
              state: address.state || address.region || address.province,
              street: address.road || address.street,
              houseNumber: address.house_number,
              postcode: address.postcode,
              district: address.suburb || address.district || address.neighbourhood,
              fullAddress: data.display_name || `${lat.toFixed(4)}, ${lon.toFixed(4)}`
            };

            console.log('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:', locationData);

            setContextData(prev => ({
              ...prev,
              location: locationData,
              isGettingLocation: false,
              locationError: null
            }));
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞:', error);
            setContextData(prev => ({
              ...prev,
              location: { lat, lon },
              isGettingLocation: false,
              locationError: null
            }));
          }
        },
        (error) => {
          let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
          switch (error.code) {
            case error.PERMISSION_DENIED:
              errorMessage = '–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω';
              break;
            case error.POSITION_UNAVAILABLE:
              errorMessage = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
              break;
            case error.TIMEOUT:
              errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏';
              break;
          }
          
          setContextData(prev => ({
            ...prev,
            locationError: errorMessage,
            isGettingLocation: false
          }));
        },
        {
          enableHighAccuracy: true,
          timeout: 10000,
          maximumAge: 300000 // 5 –º–∏–Ω—É—Ç –∫–µ—à–∞
        }
      );
    };

    getLocation();
  }, []);

  const steps = [
    {
      id: 'welcome',
      title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IT Cook! üëã',
      subtitle: '–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞',
      icon: ChefHat
    },
    {
      id: 'context',
      title: '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è üìç',
      subtitle: '–û–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—Ä–µ–º—è –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
      icon: MapPin
    },
    {
      id: 'goals',
      title: '–ö–∞–∫–∏–µ —É –≤–∞—Å —Ü–µ–ª–∏? üéØ',
      subtitle: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ',
      icon: Target
    },
    {
      id: 'experience',
      title: '–í–∞—à –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –æ–ø—ã—Ç? üë®‚Äçüç≥',
      subtitle: '–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã',
      icon: ChefHat
    },
    {
      id: 'health',
      title: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ üìä',
      subtitle: '–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–∏—Ç–∞–Ω–∏—é',
      icon: BarChart3
    },
    {
      id: 'complete',
      title: '–í—Å—ë –≥–æ—Ç–æ–≤–æ! üéâ',
      subtitle: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IT Cook. –ù–∞—á–Ω–µ–º –≥–æ—Ç–æ–≤–∏—Ç—å!',
      icon: Check
    }
  ];

  const goalOptions = [
    { id: 'lose_weight', label: '–ü–æ—Ö—É–¥–µ—Ç—å', icon: '‚öñÔ∏è' },
    { id: 'gain_weight', label: '–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å', icon: 'üí™' },
    { id: 'maintain_weight', label: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å', icon: '‚öñÔ∏è' },
    { id: 'eat_healthy', label: '–ü–∏—Ç–∞—Ç—å—Å—è –∑–¥–æ—Ä–æ–≤–æ', icon: 'ü•ó' },
    { id: 'save_money', label: '–≠–∫–æ–Ω–æ–º–∏—Ç—å –Ω–∞ –µ–¥–µ', icon: 'üí∞' },
    { id: 'learn_cooking', label: '–ù–∞—É—á–∏—Ç—å—Å—è –≥–æ—Ç–æ–≤–∏—Ç—å', icon: 'üë®‚Äçüç≥' },
    { id: 'meal_planning', label: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ', icon: 'üìÖ' },
    { id: 'family_cooking', label: '–ì–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è —Å–µ–º—å–∏', icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶' }
  ];

  const experienceOptions = [
    { id: 'beginner', label: '–ù–æ–≤–∏—á–æ–∫', desc: '–¢–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—é –≥–æ—Ç–æ–≤–∏—Ç—å' },
    { id: 'intermediate', label: '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å', desc: '–£–º–µ—é –≥–æ—Ç–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞' },
    { id: 'advanced', label: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', desc: '–ì–æ—Ç–æ–≤–ª—é —Å–ª–æ–∂–Ω—ã–µ –±–ª—é–¥–∞' },
    { id: 'expert', label: '–≠–∫—Å–ø–µ—Ä—Ç', desc: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–≤–∞—Ä' }
  ];

  const activityLevels = [
    { id: 'sedentary', label: '–ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π', desc: '–û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –º–∞–ª–æ —Å–ø–æ—Ä—Ç–∞' },
    { id: 'lightly_active', label: '–°–ª–∞–±–æ–∞–∫—Ç–∏–≤–Ω—ã–π', desc: '1-3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é' },
    { id: 'moderately_active', label: '–£–º–µ—Ä–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–π', desc: '3-5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é' },
    { id: 'very_active', label: '–û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π', desc: '6-7 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é' },
    { id: 'extremely_active', label: '–ö—Ä–∞–π–Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π', desc: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω/—Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥' }
  ];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  const getPersonalizedGreeting = () => {
    const now = new Date();
    const hour = now.getHours();
    
    if (hour >= 5 && hour < 12) {
      return {
        greeting: 'üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!',
        timeContext: '–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤—Ç—Ä–∞–∫–∞ –∏ –¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞!',
        emoji: '‚òÄÔ∏è'
      };
    } else if (hour >= 12 && hour < 17) {
      return {
        greeting: 'üåû –î–æ–±—Ä—ã–π –¥–µ–Ω—å!',
        timeContext: '–í—Ä–µ–º—è –ø–æ–¥—É–º–∞—Ç—å –æ–± –æ–±–µ–¥–µ –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø–µ—Ä–µ–∫—É—Å–∞—Ö!',
        emoji: 'üåª'
      };
    } else if (hour >= 17 && hour < 22) {
      return {
        greeting: 'üåÜ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!',
        timeContext: '–°–∞–º–æ–µ –≤—Ä–µ–º—è —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–∂–∏–Ω –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º—É –¥–Ω—é!',
        emoji: 'üåô'
      };
    } else {
      return {
        greeting: 'üåô –ü–æ–∑–¥–Ω–∏–π –≤–µ—á–µ—Ä!',
        timeContext: '–î–∞–∂–µ –ø–æ–∑–¥–Ω–∏–º –≤–µ—á–µ—Ä–æ–º –º–æ–∂–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ!',
        emoji: '‚≠ê'
      };
    }
  };

  const personalizedGreeting = getPersonalizedGreeting();

  const handleGoalToggle = (goalId: string) => {
    setUserData(prev => ({
      ...prev,
      goals: prev.goals.includes(goalId)
        ? prev.goals.filter(g => g !== goalId)
        : [...prev.goals, goalId]
    }));
  };

  const handleNext = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      // –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingUserData = localStorage.getItem('user_data');
      if (existingUserData) {
        const parsedUserData = JSON.parse(existingUserData);
        const updatedUserData = {
          ...parsedUserData,
          // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
          height: userData.height ? parseFloat(userData.height) : undefined,
          weight: userData.weight ? parseFloat(userData.weight) : undefined,
          age: userData.age ? parseInt(userData.age) : undefined,
          gender: userData.gender || undefined,
          activity_level: userData.activityLevel || undefined,
          goals: userData.goals,
          experience: userData.experience,
          dietary_restrictions: userData.dietaryRestrictions,
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          context: {
            timezone: contextData.timezone,
            location: contextData.location,
            onboarding_date: contextData.currentDate,
            onboarding_time: contextData.currentTime
          }
        };
        
        console.log('Onboarding: Updating user data with context', updatedUserData);
        localStorage.setItem('user_data', JSON.stringify(updatedUserData));
      }
      
      localStorage.setItem('onboarding_completed', 'true');
      window.location.href = '/';
    }
  };

  const handlePrevious = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const canProceed = () => {
    switch (steps[currentStep].id) {
      case 'goals':
        return userData.goals.length > 0;
      case 'experience':
        return userData.experience !== '';
      case 'health':
        return userData.activityLevel !== '' && userData.age !== '' && userData.gender !== '';
      default:
        return true;
    }
  };

  const progressPercentage = ((currentStep + 1) / steps.length) * 100;

  return (
    <>
      <Navigation />
      <div className="min-h-screen bg-gradient-to-br from-orange-50 to-blue-50 dark:from-gray-900 dark:to-gray-800">
        {/* Progress Bar */}
        <div className="fixed top-0 left-0 right-0 z-50 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
          <div className="h-1 bg-gray-200 dark:bg-gray-700">
            <motion.div
              className="h-full bg-gradient-to-r from-orange-500 to-blue-500"
              initial={{ width: 0 }}
              animate={{ width: `${progressPercentage}%` }}
              transition={{ duration: 0.3 }}
            />
          </div>
          <div className="max-w-4xl mx-auto px-4 py-3">
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-600 dark:text-gray-400">
                –®–∞–≥ {currentStep + 1} –∏–∑ {steps.length}
              </span>
              <span className="text-sm text-gray-600 dark:text-gray-400">
                {Math.round(progressPercentage)}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ
              </span>
            </div>
          </div>
        </div>

        <div className="pt-20 pb-8 px-4 sm:px-6 lg:px-8">
          <div className="max-w-4xl mx-auto">
            <AnimatePresence mode="wait">
              <motion.div
                key={currentStep}
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                transition={{ duration: 0.3 }}
                className="min-h-[600px] flex flex-col"
              >
                {/* Header */}
                <div className="text-center mb-8">
                  <motion.div
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    transition={{ duration: 0.3, delay: 0.1 }}
                    className="mx-auto h-16 w-16 bg-gradient-to-br from-orange-500 to-blue-500 rounded-full flex items-center justify-center mb-6"
                  >
                    {React.createElement(steps[currentStep].icon, {
                      className: "h-8 w-8 text-white"
                    })}
                  </motion.div>
                  <h1 className="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-2">
                    {steps[currentStep].title}
                  </h1>
                  <p className="text-lg text-gray-600 dark:text-gray-400">
                    {steps[currentStep].subtitle}
                  </p>
                </div>

                {/* Content */}
                <div className="flex-1 flex items-center justify-center">
                  {steps[currentStep].id === 'welcome' && (
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3, delay: 0.2 }}
                      className="text-center max-w-2xl"
                    >
                      {/* –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ */}
                      <div className="bg-gradient-to-r from-orange-50 to-blue-50 dark:from-orange-900/20 dark:to-blue-900/20 rounded-lg p-6 mb-8">
                        <div className="text-4xl mb-3">{personalizedGreeting.emoji}</div>
                        <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
                          {personalizedGreeting.greeting}
                        </h2>
                        <p className="text-gray-600 dark:text-gray-400">
                          {personalizedGreeting.timeContext}
                        </p>
                        {contextData.currentTime && (
                          <div className="mt-3 text-sm text-gray-500 dark:text-gray-500">
                            –°–µ–π—á–∞—Å: {contextData.currentTime}
                          </div>
                        )}
                      </div>

                      <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-8">
                        <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm">
                          <ChefHat className="h-8 w-8 text-orange-500 mx-auto mb-3" />
                          <h3 className="font-semibold text-gray-900 dark:text-white">–†–µ—Ü–µ–ø—Ç—ã</h3>
                          <p className="text-sm text-gray-600 dark:text-gray-400">10,000+ —Ä–µ—Ü–µ–ø—Ç–æ–≤</p>
                        </div>
                        <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm">
                          <Target className="h-8 w-8 text-blue-500 mx-auto mb-3" />
                          <h3 className="font-semibold text-gray-900 dark:text-white">–¶–µ–ª–∏</h3>
                          <p className="text-sm text-gray-600 dark:text-gray-400">–£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</p>
                        </div>
                        <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm">
                          <Users className="h-8 w-8 text-green-500 mx-auto mb-3" />
                          <h3 className="font-semibold text-gray-900 dark:text-white">–°–æ–æ–±—â–µ—Å—Ç–≤–æ</h3>
                          <p className="text-sm text-gray-600 dark:text-gray-400">–î–µ–ª–∏—Ç–µ—Å—å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏</p>
                        </div>
                        <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm">
                          <BarChart3 className="h-8 w-8 text-purple-500 mx-auto mb-3" />
                          <h3 className="font-semibold text-gray-900 dark:text-white">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h3>
                          <p className="text-sm text-gray-600 dark:text-gray-400">–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å</p>
                        </div>
                      </div>
                      <p className="text-gray-600 dark:text-gray-400 mb-8">
                        IT Cook –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≥–æ—Ç–æ–≤–∏—Ç—å –≤–∫—É—Å–Ω—É—é –∏ –∑–¥–æ—Ä–æ–≤—É—é –µ–¥—É, –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π –ø–∏—Ç–∞–Ω–∏—è 
                        –∏ –¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
                      </p>
                    </motion.div>
                  )}

                  {steps[currentStep].id === 'context' && (
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3, delay: 0.2 }}
                      className="w-full max-w-2xl space-y-6"
                    >
                      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç–µ */}
                      <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm">
                        <div className="flex items-center space-x-3 mb-4">
                          <Clock className="h-6 w-6 text-blue-500" />
                          <h3 className="font-semibold text-gray-900 dark:text-white">
                            –¢–µ–∫—É—â–∏–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
                          </h3>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4">
                            <div className="text-sm text-gray-600 dark:text-gray-400 mb-1">–î–∞—Ç–∞</div>
                            <div className="font-medium text-gray-900 dark:text-white">
                              {contextData.currentDate || '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è...'}
                            </div>
                          </div>
                          <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4">
                            <div className="text-sm text-gray-600 dark:text-gray-400 mb-1">–í—Ä–µ–º—è</div>
                            <div className="font-medium text-gray-900 dark:text-white">
                              {contextData.currentTime || '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è...'}
                            </div>
                          </div>
                        </div>
                        {contextData.timezone && (
                          <div className="mt-4 text-sm text-gray-600 dark:text-gray-400">
                            –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {contextData.timezone}
                          </div>
                        )}
                      </div>

                      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ */}
                      <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm">
                        <div className="flex items-center space-x-3 mb-4">
                          <MapPin className="h-6 w-6 text-green-500" />
                          <h3 className="font-semibold text-gray-900 dark:text-white">
                            –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                          </h3>
                        </div>
                        
                        {contextData.isGettingLocation && (
                          <div className="flex items-center space-x-3 text-gray-600 dark:text-gray-400">
                            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-green-500"></div>
                            <span>–û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...</span>
                          </div>
                        )}

                        {contextData.location && (
                          <div className="bg-green-50 dark:bg-green-900/20 rounded-lg p-4 space-y-3">
                            <div className="flex items-center justify-between">
                              <div className="flex-1">
                                <div className="font-medium text-gray-900 dark:text-white mb-2">
                                  üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
                                </div>
                                
                                {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥—Ä–µ—Å–µ */}
                                <div className="space-y-2 text-sm">
                                  {contextData.location.country && (
                                    <div className="flex justify-between">
                                      <span className="text-gray-600 dark:text-gray-400">üåç –°—Ç—Ä–∞–Ω–∞:</span>
                                      <span className="font-medium text-gray-900 dark:text-white">
                                        {contextData.location.country}
                                      </span>
                                    </div>
                                  )}
                                  
                                  {contextData.location.state && (
                                    <div className="flex justify-between">
                                      <span className="text-gray-600 dark:text-gray-400">üèõÔ∏è –†–µ–≥–∏–æ–Ω:</span>
                                      <span className="font-medium text-gray-900 dark:text-white">
                                        {contextData.location.state}
                                      </span>
                                    </div>
                                  )}
                                  
                                  {contextData.location.city && (
                                    <div className="flex justify-between">
                                      <span className="text-gray-600 dark:text-gray-400">üèôÔ∏è –ì–æ—Ä–æ–¥:</span>
                                      <span className="font-medium text-gray-900 dark:text-white">
                                        {contextData.location.city}
                                      </span>
                                    </div>
                                  )}
                                  
                                  {contextData.location.district && (
                                    <div className="flex justify-between">
                                      <span className="text-gray-600 dark:text-gray-400">üèòÔ∏è –†–∞–π–æ–Ω:</span>
                                      <span className="font-medium text-gray-900 dark:text-white">
                                        {contextData.location.district}
                                      </span>
                                    </div>
                                  )}
                                  
                                  {contextData.location.street && (
                                    <div className="flex justify-between">
                                      <span className="text-gray-600 dark:text-gray-400">üõ£Ô∏è –£–ª–∏—Ü–∞:</span>
                                      <span className="font-medium text-gray-900 dark:text-white">
                                        {contextData.location.street} {contextData.location.houseNumber || ''}
                                      </span>
                                    </div>
                                  )}
                                  
                                  {contextData.location.postcode && (
                                    <div className="flex justify-between">
                                      <span className="text-gray-600 dark:text-gray-400">üìÆ –ò–Ω–¥–µ–∫—Å:</span>
                                      <span className="font-medium text-gray-900 dark:text-white">
                                        {contextData.location.postcode}
                                      </span>
                                    </div>
                                  )}
                                </div>
                                
                                {/* –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã */}
                                <div className="mt-3 pt-2 border-t border-green-200 dark:border-green-700">
                                  <div className="text-xs text-gray-500 dark:text-gray-400">
                                    –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {contextData.location.lat.toFixed(6)}, {contextData.location.lon.toFixed(6)}
                                  </div>
                                </div>
                              </div>
                              
                              <div className="text-green-500 ml-4">
                                <Check className="h-6 w-6" />
                              </div>
                            </div>
                            
                            {/* –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å */}
                            {contextData.location.fullAddress && (
                              <div className="mt-3 p-3 bg-green-100 dark:bg-green-800/30 rounded-lg">
                                <div className="text-xs text-gray-600 dark:text-gray-400 mb-1">
                                  –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:
                                </div>
                                <div className="text-sm text-gray-900 dark:text-white">
                                  {contextData.location.fullAddress}
                                </div>
                              </div>
                            )}
                          </div>
                        )}

                        {contextData.locationError && (
                          <div className="bg-orange-50 dark:bg-orange-900/20 rounded-lg p-4">
                            <div className="flex items-center space-x-3">
                              <div className="text-orange-500">‚ö†Ô∏è</div>
                              <div>
                                <div className="font-medium text-orange-900 dark:text-orange-100">
                                  {contextData.locationError}
                                </div>
                                <div className="text-sm text-orange-600 dark:text-orange-200 mt-1">
                                  –ú—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –º–æ–∂–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!
                                </div>
                              </div>
                            </div>
                          </div>
                        )}

                        {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è */}
                        <div className="mt-4">
                          <button
                            onClick={() => openLocationPicker()}
                            className="w-full inline-flex items-center justify-center px-4 py-3 text-sm font-medium text-blue-600 bg-blue-50 border border-blue-200 rounded-lg hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:bg-blue-900 dark:text-blue-300 dark:border-blue-700 dark:hover:bg-blue-800"
                          >
                            <MapPin className="h-5 w-5 mr-2" />
                            üìç –í—ã–±—Ä–∞—Ç—å —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ
                          </button>
                          <p className="text-xs text-gray-500 dark:text-gray-400 text-center mt-2">
                            –û—Ç–∫—Ä–æ–µ—Ç—Å—è Google Maps –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
                          </p>
                        </div>

                        <div className="mt-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                          <h4 className="font-medium text-gray-900 dark:text-white mb-2">
                            üéØ –ö–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏?
                          </h4>
                          <div className="space-y-2 text-sm text-gray-600 dark:text-gray-400">
                            <div className="flex items-start space-x-2">
                              <span className="text-orange-500">üçÖ</span>
                              <span><strong>–°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:</strong> –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≤–µ–∂–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ</span>
                            </div>
                            <div className="flex items-start space-x-2">
                              <span className="text-blue-500">üè™</span>
                              <span><strong>–ú–µ—Å—Ç–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã:</strong> –ü–æ–∏—Å–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–∞—Ö</span>
                            </div>
                            <div className="flex items-start space-x-2">
                              <span className="text-green-500">üåø</span>
                              <span><strong>–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫—É—Ö–Ω—è:</strong> –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –±–ª—é–¥–∞ –∏ —Ä–µ—Ü–µ–ø—Ç—ã –≤–∞—à–µ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏</span>
                            </div>
                            <div className="flex items-start space-x-2">
                              <span className="text-purple-500">üå°Ô∏è</span>
                              <span><strong>–ö–ª–∏–º–∞—Ç:</strong> –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞—Ü–∏–æ–Ω–∞ –ø–æ–¥ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è</span>
                            </div>
                            <div className="flex items-start space-x-2">
                              <span className="text-red-500">‚è∞</span>
                              <span><strong>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</strong> –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è</span>
                            </div>
                            <div className="flex items-start space-x-2">
                              <span className="text-yellow-500">üì¶</span>
                              <span><strong>–î–æ—Å—Ç–∞–≤–∫–∞:</strong> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª—É–∂–±–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ</span>
                            </div>
                          </div>
                          
                          <div className="mt-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700">
                            <div className="flex items-center space-x-2 text-blue-800 dark:text-blue-200">
                              <span>üîí</span>
                              <span className="text-sm font-medium">
                                –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
                              </span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  )}

                  {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∫–∞—Ä—Ç–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è */}
                  {contextData.showLocationPicker && (
                    <div className="fixed inset-0 z-50 overflow-y-auto">
                      <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
                        <div className="fixed inset-0 transition-opacity" aria-hidden="true">
                          <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
                        </div>

                        <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

                        <div className="inline-block align-bottom bg-white dark:bg-gray-800 rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full">
                          <div className="bg-white dark:bg-gray-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                            <div className="flex items-center justify-between mb-4">
                              <h3 className="text-lg leading-6 font-medium text-gray-900 dark:text-white">
                                üìç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                              </h3>
                              <button
                                onClick={closeLocationPicker}
                                className="text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300"
                              >
                                <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                </svg>
                              </button>
                            </div>
                            
                            <div className="mb-4">
                              <p className="text-sm text-gray-600 dark:text-gray-400">
                                –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º.
                              </p>
                            </div>

                            {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç—ã */}
                            <div className="relative">
                              <div className="h-96 bg-gray-200 dark:bg-gray-700 rounded-lg flex items-center justify-center">
                                <div className="text-center max-w-md">
                                  <MapPin className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                                  <h4 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                                    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞
                                  </h4>
                                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                                    –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤:
                                  </p>
                                  
                                  {/* –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ */}
                                  <div className="space-y-2">
                                    <button
                                      onClick={() => setSelectedLocation(55.7558, 37.6176)}
                                      className="block w-full text-left px-4 py-2 text-sm bg-blue-50 dark:bg-blue-900/20 hover:bg-blue-100 dark:hover:bg-blue-800/30 rounded border border-blue-200 dark:border-blue-700"
                                    >
                                      üèõÔ∏è <strong>–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å</strong><br/>
                                      <span className="text-gray-600 dark:text-gray-400">–¶–µ–Ω—Ç—Ä –ú–æ—Å–∫–≤—ã, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1</span>
                                    </button>
                                    <button
                                      onClick={() => setSelectedLocation(59.9311, 30.3609)}
                                      className="block w-full text-left px-4 py-2 text-sm bg-blue-50 dark:bg-blue-900/20 hover:bg-blue-100 dark:hover:bg-blue-800/30 rounded border border-blue-200 dark:border-blue-700"
                                    >
                                      üåä <strong>–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –î–≤–æ—Ä—Ü–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å</strong><br/>
                                      <span className="text-gray-600 dark:text-gray-400">–¶–µ–Ω—Ç—Ä –°–ü–±, –î–≤–æ—Ä—Ü–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å, 2</span>
                                    </button>
                                    <button
                                      onClick={() => setSelectedLocation(55.7887, 49.1221)}
                                      className="block w-full text-left px-4 py-2 text-sm bg-blue-50 dark:bg-blue-900/20 hover:bg-blue-100 dark:hover:bg-blue-800/30 rounded border border-blue-200 dark:border-blue-700"
                                    >
                                      üè¢ <strong>–ö–∞–∑–∞–Ω—å, –ö—Ä–µ–º–ª—å</strong><br/>
                                      <span className="text-gray-600 dark:text-gray-400">–ö–∞–∑–∞–Ω—å, –ö—Ä–µ–º–ª—ë–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 2</span>
                                    </button>
                                    <button
                                      onClick={() => setSelectedLocation(56.8431, 60.6454)}
                                      className="block w-full text-left px-4 py-2 text-sm bg-blue-50 dark:bg-blue-900/20 hover:bg-blue-100 dark:hover:bg-blue-800/30 rounded border border-blue-200 dark:border-blue-700"
                                    >
                                      üè≠ <strong>–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —Ü–µ–Ω—Ç—Ä</strong><br/>
                                      <span className="text-gray-600 dark:text-gray-400">–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª–∏—Ü–∞ –õ–µ–Ω–∏–Ω–∞, 24</span>
                                    </button>
                                  </div>
                                  
                                  <div className="mt-4 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-700 rounded">
                                    <p className="text-xs text-yellow-700 dark:text-yellow-300">
                                      üí° <strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ Google Maps API 
                                      –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.
                                    </p>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                          
                          <div className="bg-gray-50 dark:bg-gray-700 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                            <button
                              onClick={closeLocationPicker}
                              type="button"
                              className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-800 text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                            >
                              –û—Ç–º–µ–Ω–∞
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}

                  {steps[currentStep].id === 'goals' && (
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3, delay: 0.2 }}
                      className="w-full max-w-4xl"
                    >
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        {goalOptions.map((goal) => (
                          <motion.button
                            key={goal.id}
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                            onClick={() => handleGoalToggle(goal.id)}
                            className={`p-4 rounded-lg border-2 transition-all ${
                              userData.goals.includes(goal.id)
                                ? 'border-orange-500 bg-orange-50 dark:bg-orange-900/20'
                                : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 hover:border-gray-300 dark:hover:border-gray-600'
                            }`}
                          >
                            <div className="text-3xl mb-2">{goal.icon}</div>
                            <div className="text-sm font-medium text-gray-900 dark:text-white">
                              {goal.label}
                            </div>
                          </motion.button>
                        ))}
                      </div>
                    </motion.div>
                  )}

                  {steps[currentStep].id === 'experience' && (
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3, delay: 0.2 }}
                      className="w-full max-w-2xl space-y-4"
                    >
                      {experienceOptions.map((option) => (
                        <motion.button
                          key={option.id}
                          whileHover={{ scale: 1.02 }}
                          whileTap={{ scale: 0.98 }}
                          onClick={() => setUserData(prev => ({ ...prev, experience: option.id }))}
                          className={`w-full p-6 rounded-lg border-2 text-left transition-all ${
                            userData.experience === option.id
                              ? 'border-orange-500 bg-orange-50 dark:bg-orange-900/20'
                              : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 hover:border-gray-300 dark:hover:border-gray-600'
                          }`}
                        >
                          <div className="font-semibold text-gray-900 dark:text-white mb-1">
                            {option.label}
                          </div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">
                            {option.desc}
                          </div>
                        </motion.button>
                      ))}
                    </motion.div>
                  )}

                  {steps[currentStep].id === 'health' && (
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3, delay: 0.2 }}
                      className="w-full max-w-2xl space-y-6"
                    >
                      {/* Basic Info */}
                      <div className="bg-white dark:bg-gray-800 rounded-lg p-6">
                        <h3 className="font-semibold text-gray-900 dark:text-white mb-4">
                          –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        </h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                          <div>
                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                              –í–æ–∑—Ä–∞—Å—Ç
                            </label>
                            <input
                              type="number"
                              value={userData.age}
                              onChange={(e) => setUserData(prev => ({ ...prev, age: e.target.value }))}
                              className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                              placeholder="25"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                              –ü–æ–ª
                            </label>
                            <select
                              value={userData.gender}
                              onChange={(e) => setUserData(prev => ({ ...prev, gender: e.target.value }))}
                              className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                            >
                              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª</option>
                              <option value="male">–ú—É–∂—Å–∫–æ–π</option>
                              <option value="female">–ñ–µ–Ω—Å–∫–∏–π</option>
                              <option value="other">–î—Ä—É–≥–æ–π</option>
                            </select>
                          </div>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                              –†–æ—Å—Ç (—Å–º)
                            </label>
                            <input
                              type="number"
                              value={userData.height}
                              onChange={(e) => setUserData(prev => ({ ...prev, height: e.target.value }))}
                              className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                              placeholder="170"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                              –í–µ—Å (–∫–≥)
                            </label>
                            <input
                              type="number"
                              value={userData.weight}
                              onChange={(e) => setUserData(prev => ({ ...prev, weight: e.target.value }))}
                              className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                              placeholder="70"
                            />
                          </div>
                        </div>
                      </div>

                      {/* Activity Level */}
                      <div className="bg-white dark:bg-gray-800 rounded-lg p-6">
                        <h3 className="font-semibold text-gray-900 dark:text-white mb-4">
                          –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        </h3>
                        <div className="space-y-3">
                          {activityLevels.map((level) => (
                            <button
                              key={level.id}
                              onClick={() => setUserData(prev => ({ ...prev, activityLevel: level.id }))}
                              className={`w-full p-4 rounded-lg border text-left transition-all ${
                                userData.activityLevel === level.id
                                  ? 'border-orange-500 bg-orange-50 dark:bg-orange-900/20'
                                  : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                              }`}
                            >
                              <div className="font-medium text-gray-900 dark:text-white">
                                {level.label}
                              </div>
                              <div className="text-sm text-gray-600 dark:text-gray-400">
                                {level.desc}
                              </div>
                            </button>
                          ))}
                        </div>
                      </div>
                    </motion.div>
                  )}

                  {steps[currentStep].id === 'complete' && (
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3, delay: 0.2 }}
                      className="text-center max-w-2xl"
                    >
                      <div className="bg-gradient-to-br from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 rounded-lg p-8">
                        <div className="text-6xl mb-4">üéâ</div>
                        <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
                          –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
                        </h3>
                        <p className="text-gray-600 dark:text-gray-400 mb-6">
                          –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ IT Cook: 
                          –Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –∏ –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∫—É–ª–∏–Ω–∞—Ä–∞–º–∏.
                        </p>
                        <div className="grid grid-cols-3 gap-4 text-sm">
                          <div>
                            <div className="font-semibold text-gray-900 dark:text-white">
                              {userData.goals.length}
                            </div>
                            <div className="text-gray-600 dark:text-gray-400">–¶–µ–ª–µ–π –≤—ã–±—Ä–∞–Ω–æ</div>
                          </div>
                          <div>
                            <div className="font-semibold text-gray-900 dark:text-white">
                              {userData.experience ? experienceOptions.find(e => e.id === userData.experience)?.label : '–ù–µ —É–∫–∞–∑–∞–Ω'}
                            </div>
                            <div className="text-gray-600 dark:text-gray-400">–£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞</div>
                          </div>
                          <div>
                            <div className="font-semibold text-gray-900 dark:text-white">
                              {userData.activityLevel ? activityLevels.find(a => a.id === userData.activityLevel)?.label : '–ù–µ —É–∫–∞–∑–∞–Ω'}
                            </div>
                            <div className="text-gray-600 dark:text-gray-400">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</div>
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  )}
                </div>

                {/* Navigation */}
                <div className="flex justify-between items-center mt-8 pt-8 border-t border-gray-200 dark:border-gray-700">
                  <Button
                    onClick={handlePrevious}
                    variant="outline"
                    disabled={currentStep === 0}
                    className="flex items-center space-x-2"
                  >
                    <ArrowLeft className="h-4 w-4" />
                    <span>–ù–∞–∑–∞–¥</span>
                  </Button>

                  <div className="flex space-x-2">
                    {steps.map((_, index) => (
                      <div
                        key={index}
                        className={`w-2 h-2 rounded-full transition-colors ${
                          index <= currentStep
                            ? 'bg-orange-500'
                            : 'bg-gray-300 dark:bg-gray-600'
                        }`}
                      />
                    ))}
                  </div>

                  <Button
                    onClick={handleNext}
                    disabled={!canProceed()}
                    className="flex items-center space-x-2 bg-orange-500 hover:bg-orange-600"
                  >
                    <span>
                      {currentStep === steps.length - 1 ? '–ù–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∏—Ç—å!' : '–î–∞–ª–µ–µ'}
                    </span>
                    <ArrowRight className="h-4 w-4" />
                  </Button>
                </div>
              </motion.div>
            </AnimatePresence>
          </div>
        </div>
      </div>
    </>
  );
}
