import React from 'react';
import { motion } from 'framer-motion';
import { Button } from '../ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Badge } from '../ui/badge';
import { 
  Bot, 
  ChefHat, 
  AlertTriangle,
  RefreshCw,
  Utensils,
  ShoppingCart,
  TrendingUp,
  Package
} from 'lucide-react';
import { AIFridgeReport, GeneratedRecipe } from '../../lib/api/fridge';

interface FridgeAIChatIntegrationProps {
  report: AIFridgeReport | null;
  recipes: { recipes: GeneratedRecipe[] } | null;
  isLoadingReport: boolean;
  isLoadingRecipes: boolean;
  onGenerateReport: () => void;
  onGenerateRecipes: () => void;
  onSendToChat: (message: string) => void;
}

export default function FridgeAIChatIntegration({
  report,
  recipes,
  isLoadingReport,
  isLoadingRecipes,
  onGenerateReport,
  onGenerateRecipes,
  onSendToChat
}: FridgeAIChatIntegrationProps) {

  const handleSendRecommendationToChat = (recommendation: string) => {
    onSendToChat(`–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ: ${recommendation}`);
  };

  const handleSendRecipeToChat = (recipe: GeneratedRecipe) => {
    const message = `–î–∞–π –ø–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è "${recipe.name}" –Ω–∞ ${recipe.servings} –ø–æ—Ä—Ü–∏–π. –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: ${recipe.cook_time}`;
    onSendToChat(message);
  };

  const handleAskNutritionQuestion = () => {
    onSendToChat("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –º–æ—ë–º —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–∏—Ç–∞–Ω–∏—é");
  };

  const handleAskShoppingAdvice = () => {
    onSendToChat("–ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å, —á—Ç–æ–±—ã –¥–æ–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è?");
  };

  const handleAskExpirationTips = () => {
    onSendToChat("–î–∞–π —Å–æ–≤–µ—Ç—ã –∫–∞–∫ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –ø—Ä–æ–¥–ª–∏—Ç—å –∏—Ö —Å–≤–µ–∂–µ—Å—Ç—å");
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ */}
      <div className="text-center">
        <div className="flex items-center justify-center space-x-3 mb-2">
          <div className="p-3 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full">
            <Bot className="h-6 w-6 text-white" />
          </div>
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
            –ò–ò –∞–Ω–∞–ª–∏–∑ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞
          </h2>
        </div>
        <p className="text-gray-600 dark:text-gray-400">
          –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∞—à–µ–≥–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞
        </p>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Button
          onClick={onGenerateReport}
          disabled={isLoadingReport}
          className="bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white py-6 h-auto"
        >
          <div className="flex flex-col items-center space-y-2">
            {isLoadingReport ? (
              <RefreshCw className="h-6 w-6 animate-spin" />
            ) : (
              <TrendingUp className="h-6 w-6" />
            )}
            <div className="text-center">
              <div className="font-semibold">
                {isLoadingReport ? '–ê–Ω–∞–ª–∏–∑...' : '–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑'}
              </div>
              <div className="text-sm opacity-90">
                –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
              </div>
            </div>
          </div>
        </Button>

        <Button
          onClick={onGenerateRecipes}
          disabled={isLoadingRecipes}
          className="bg-gradient-to-r from-green-500 to-teal-500 hover:from-green-600 hover:to-teal-600 text-white py-6 h-auto"
        >
          <div className="flex flex-col items-center space-y-2">
            {isLoadingRecipes ? (
              <RefreshCw className="h-6 w-6 animate-spin" />
            ) : (
              <ChefHat className="h-6 w-6" />
            )}
            <div className="text-center">
              <div className="font-semibold">
                {isLoadingRecipes ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã'}
              </div>
              <div className="text-sm opacity-90">
                –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
              </div>
            </div>
          </div>
        </Button>
      </div>

      {/* –û—Ç—á—ë—Ç –ò–ò */}
      {report && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="space-y-4"
        >
          {/* –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ */}
          <Card className="border-2 border-purple-200 dark:border-purple-800">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Bot className="h-5 w-5 text-purple-500" />
                <span>–ê–Ω–∞–ª–∏–∑ –ò–ò</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-gray-700 dark:text-gray-300 mb-4">{report.summary}</p>
              <Button
                variant="outline"
                size="sm"
                onClick={() => onSendToChat(`–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –∞–Ω–∞–ª–∏–∑–µ –º–æ–µ–≥–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞: ${report.summary}`)}
                className="w-full"
              >
                üí¨ –û–±—Å—É–¥–∏—Ç—å –≤ —á–∞—Ç–µ
              </Button>
            </CardContent>
          </Card>

          {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
          {report.recommendations && report.recommendations.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Utensils className="h-5 w-5 text-green-500" />
                  <span>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {report.recommendations.map((rec, index) => (
                    <div 
                      key={index}
                      className="flex items-start justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg"
                    >
                      <p className="text-sm text-gray-700 dark:text-gray-300 flex-1">
                        {rec}
                      </p>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleSendRecommendationToChat(rec)}
                        className="ml-2 text-blue-500 hover:text-blue-600"
                      >
                        üí¨
                      </Button>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* –ê–ª–µ—Ä—Ç—ã */}
          {report.alerts && report.alerts.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <AlertTriangle className="h-5 w-5 text-orange-500" />
                  <span>–í–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  {report.alerts.map((alert, index) => (
                    <div 
                      key={index}
                      className={`p-3 rounded-lg border-l-4 ${
                        alert.urgency === 'high' 
                          ? 'border-red-500 bg-red-50 dark:bg-red-900/20' 
                          : 'border-yellow-500 bg-yellow-50 dark:bg-yellow-900/20'
                      }`}
                    >
                      <p className="text-sm font-medium">
                        {alert.message}
                      </p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}
        </motion.div>
      )}

      {/* –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã */}
      {recipes && recipes.recipes && recipes.recipes.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="space-y-4"
        >
          <Card className="border-2 border-green-200 dark:border-green-800">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <ChefHat className="h-5 w-5 text-green-500" />
                <span>–†–µ—Ü–µ–ø—Ç—ã –¥–ª—è –≤–∞—Å</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid gap-4">
                {recipes.recipes.map((recipe, index) => (
                  <div 
                    key={index}
                    className="border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:shadow-md transition-shadow"
                  >
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <h4 className="font-semibold text-gray-900 dark:text-white mb-2">
                          {recipe.name}
                        </h4>
                        <p className="text-sm text-gray-600 dark:text-gray-400 mb-3">
                          {recipe.description}
                        </p>
                        <div className="flex flex-wrap gap-2 mb-3">
                          <Badge variant="secondary" className="text-xs">
                            ‚è±Ô∏è {recipe.cook_time}
                          </Badge>
                          <Badge variant="secondary" className="text-xs">
                            üë• {recipe.servings} –ø–æ—Ä—Ü–∏–π
                          </Badge>
                          <Badge variant="secondary" className="text-xs">
                            üìä {recipe.difficulty}
                          </Badge>
                        </div>
                        <div className="space-y-2">
                          {recipe.available_ingredients.length > 0 && (
                            <div>
                              <p className="text-xs font-medium text-green-600 dark:text-green-400 mb-1">
                                ‚úÖ –ï—Å—Ç—å —É –≤–∞—Å:
                              </p>
                              <div className="flex flex-wrap gap-1">
                                {recipe.available_ingredients.map((ing, i) => (
                                  <Badge key={i} variant="secondary" className="text-xs bg-green-100 text-green-800">
                                    {ing}
                                  </Badge>
                                ))}
                              </div>
                            </div>
                          )}
                          {recipe.missing_ingredients.length > 0 && (
                            <div>
                              <p className="text-xs font-medium text-orange-600 dark:text-orange-400 mb-1">
                                üõí –ù—É–∂–Ω–æ –∫—É–ø–∏—Ç—å:
                              </p>
                              <div className="flex flex-wrap gap-1">
                                {recipe.missing_ingredients.map((ing, i) => (
                                  <Badge key={i} variant="outline" className="text-xs">
                                    {ing}
                                  </Badge>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleSendRecipeToChat(recipe)}
                        className="ml-4"
                      >
                        üí¨ –†–µ—Ü–µ–ø—Ç –≤ —á–∞—Ç
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </motion.div>
      )}

      {/* –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —á–∞—Ç–∞ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Package className="h-5 w-5 text-blue-500" />
            <span>–ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ò–ò</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
            <Button
              variant="outline"
              onClick={handleAskNutritionQuestion}
              className="text-left h-auto p-4 flex flex-col items-start space-y-1"
            >
              <div className="font-medium text-sm">ü•ó –ü–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å</div>
              <div className="text-xs text-gray-500">–ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è</div>
            </Button>
            
            <Button
              variant="outline"
              onClick={handleAskShoppingAdvice}
              className="text-left h-auto p-4 flex flex-col items-start space-y-1"
            >
              <div className="font-medium text-sm">üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫</div>
              <div className="text-xs text-gray-500">–ß—Ç–æ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å</div>
            </Button>
            
            <Button
              variant="outline"
              onClick={handleAskExpirationTips}
              className="text-left h-auto p-4 flex flex-col items-start space-y-1"
            >
              <div className="font-medium text-sm">üìÖ –•—Ä–∞–Ω–µ–Ω–∏–µ</div>
              <div className="text-xs text-gray-500">–°–æ–≤–µ—Ç—ã –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏</div>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
